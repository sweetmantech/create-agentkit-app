"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WowSellTokenAction = exports.WowSellTokenInput = void 0;
exports.wowSellToken = wowSellToken;
const constants_1 = require("../constants");
const utils_1 = require("../uniswap/utils");
const utils_2 = require("../utils");
const zod_1 = require("zod");
const WOW_SELL_TOKEN_PROMPT = `
This tool can only be used to sell a Zora Wow ERC20 memecoin (also can be referred to as a bonding curve token) for ETH.
Do not use this tool for any other purpose, or trading other assets.

Inputs:
- WOW token contract address
- Amount of tokens to sell (in wei)

Important notes:
- The amount is a string and cannot have any decimal points, since the unit of measurement is wei.
- Make sure to use the exact amount provided, and if there's any doubt, check by getting more information before continuing with the action. 
- 1 wei = 0.000000000000000001 ETH
- Minimum purchase amount is 100000000000000 wei (0.0000001 ETH)
- Only supported on the following networks:
  - Base Sepolia (ie, 'base-sepolia')
  - Base Mainnet (ie, 'base', 'base-mainnnet')
`;
/**
 * Input schema for sell token action.
 */
exports.WowSellTokenInput = zod_1.z
    .object({
    contractAddress: zod_1.z
        .string()
        .describe("The WOW token contract address, such as `0x036CbD53842c5426634e7929541eC2318f3dCF7e`"),
    amountTokensInWei: zod_1.z
        .string()
        .describe("Amount of tokens to sell (in wei), meaning 1 is 1 wei or 0.000000000000000001 of the token"),
})
    .strip()
    .describe("Instructions for selling WOW tokens");
/**
 * Sells WOW tokens for ETH.
 *
 * @param wallet - The wallet to sell the tokens from.
 * @param args - The input arguments for the action.
 * @returns A message confirming the sale with the transaction hash.
 */
async function wowSellToken(wallet, args) {
    try {
        const ethQuote = await (0, utils_2.getSellQuote)(wallet.getNetworkId(), args.contractAddress, args.amountTokensInWei);
        const hasGraduated = await (0, utils_1.getHasGraduated)(wallet.getNetworkId(), args.contractAddress);
        // Multiply by 98/100 and floor to get 98% of quote as minimum
        const minEth = (BigInt(Math.floor(Number(ethQuote) * 98)) / BigInt(100)).toString();
        const invocation = await wallet.invokeContract({
            contractAddress: args.contractAddress,
            method: "sell",
            abi: constants_1.WOW_ABI,
            args: {
                tokensToSell: args.amountTokensInWei,
                recipient: (await wallet.getDefaultAddress()).getId(),
                orderReferrer: "0x0000000000000000000000000000000000000000",
                comment: "",
                expectedMarketType: hasGraduated ? "1" : "0",
                minPayoutSize: minEth,
                sqrtPriceLimitX96: "0",
            },
        });
        const result = await invocation.wait();
        return `Sold WoW ERC20 memecoin with transaction hash: ${result.getTransaction().getTransactionHash()}`;
    }
    catch (error) {
        return `Error selling Zora Wow ERC20 memecoin: ${error}`;
    }
}
/**
 * Zora Wow sell token action.
 */
class WowSellTokenAction {
    constructor() {
        this.name = "wow_sell_token";
        this.description = WOW_SELL_TOKEN_PROMPT;
        this.argsSchema = exports.WowSellTokenInput;
        this.func = wowSellToken;
    }
}
exports.WowSellTokenAction = WowSellTokenAction;

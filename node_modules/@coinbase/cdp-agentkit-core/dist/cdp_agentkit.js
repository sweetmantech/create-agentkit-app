"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CdpAgentkit = void 0;
const coinbase_sdk_1 = require("@coinbase/coinbase-sdk");
const package_json_1 = require("../package.json");
/**
 * CDP Agentkit
 */
class CdpAgentkit {
    /**
     * Initializes a new CDP Agentkit instance
     *
     * @param config - Configuration options for the CDP Agentkit
     */
    constructor(config = {}) {
        const cdpApiKeyName = config.cdpApiKeyName || process.env.CDP_API_KEY_NAME;
        const cdpApiKeyPrivateKey = config.cdpApiKeyPrivateKey || process.env.CDP_API_KEY_PRIVATE_KEY;
        const source = config.source;
        const sourceVersion = config.sourceVersion;
        if (!cdpApiKeyName) {
            throw new Error("CDP_API_KEY_NAME is required but not provided");
        }
        if (!cdpApiKeyPrivateKey) {
            throw new Error("CDP_API_KEY_PRIVATE_KEY is required but not provided");
        }
        // Configure CDP SDK
        coinbase_sdk_1.Coinbase.configure({
            apiKeyName: cdpApiKeyName,
            privateKey: cdpApiKeyPrivateKey.replace(/\\n/g, "\n"),
            source: source || "agentkit-core",
            sourceVersion: sourceVersion || package_json_1.version,
        });
    }
    /**
     * Configures CDP Agentkit with a Wallet.
     *
     * @param config - Optional configuration parameters
     * @returns A Promise that resolves to a new CdpAgentkit instance
     * @throws Error if required environment variables are missing or wallet initialization fails
     */
    static async configureWithWallet(config = {}) {
        const agentkit = new CdpAgentkit(config);
        const networkId = config.networkId || process.env.NETWORK_ID || coinbase_sdk_1.Coinbase.networks.BaseSepolia;
        try {
            if (config.cdpWalletData) {
                const walletData = JSON.parse(config.cdpWalletData);
                agentkit.wallet = await coinbase_sdk_1.Wallet.import(walletData);
            }
            else {
                agentkit.wallet = await coinbase_sdk_1.Wallet.create({ networkId: networkId });
            }
        }
        catch (error) {
            throw new Error(`Failed to initialize wallet: ${error}`);
        }
        return agentkit;
    }
    /**
     * Executes a CDP action
     *
     * @param action - The CDP action to execute
     * @param args - Arguments for the action
     * @returns Result of the action execution
     * @throws Error if action execution fails
     */
    async run(action, args) {
        if (action.func.length > 1) {
            if (!this.wallet) {
                return `Unable to run CDP Action: ${action.name}. A Wallet is required. Please configure CDP Agentkit with a Wallet to run this action.`;
            }
            return await action.func(this.wallet, args);
        }
        return await action.func(args);
    }
    /**
     * Exports wallet data required to re-instantiate the wallet
     *
     * @returns JSON string of wallet data including wallet_id and seed
     */
    async exportWallet() {
        if (!this.wallet) {
            throw Error("Unable to export wallet. Agentkit is not configured with a wallet.");
        }
        const walletData = this.wallet.export();
        return JSON.stringify({
            ...walletData,
            defaultAddressId: (await this.wallet.getDefaultAddress()).getId(),
        });
    }
}
exports.CdpAgentkit = CdpAgentkit;

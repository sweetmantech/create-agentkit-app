import { CdpAction, CdpActionSchemaAny } from "./actions/cdp/cdp_action";
/**
 * Configuration options for the CDP Agentkit
 */
interface CdpAgentkitOptions {
    cdpApiKeyName?: string;
    cdpApiKeyPrivateKey?: string;
    source?: string;
    sourceVersion?: string;
}
/**
 * Configuration options for the CDP Agentkit with a Wallet.
 */
interface ConfigureCdpAgentkitWithWalletOptions {
    cdpApiKeyName?: string;
    cdpApiKeyPrivateKey?: string;
    source?: string;
    sourceVersion?: string;
    networkId?: string;
    cdpWalletData?: string;
}
/**
 * CDP Agentkit
 */
export declare class CdpAgentkit {
    private wallet?;
    /**
     * Initializes a new CDP Agentkit instance
     *
     * @param config - Configuration options for the CDP Agentkit
     */
    constructor(config?: CdpAgentkitOptions);
    /**
     * Configures CDP Agentkit with a Wallet.
     *
     * @param config - Optional configuration parameters
     * @returns A Promise that resolves to a new CdpAgentkit instance
     * @throws Error if required environment variables are missing or wallet initialization fails
     */
    static configureWithWallet(config?: ConfigureCdpAgentkitWithWalletOptions): Promise<CdpAgentkit>;
    /**
     * Executes a CDP action
     *
     * @param action - The CDP action to execute
     * @param args - Arguments for the action
     * @returns Result of the action execution
     * @throws Error if action execution fails
     */
    run<TActionSchema extends CdpActionSchemaAny>(action: CdpAction<TActionSchema>, args: TActionSchema): Promise<string>;
    /**
     * Exports wallet data required to re-instantiate the wallet
     *
     * @returns JSON string of wallet data including wallet_id and seed
     */
    exportWallet(): Promise<string>;
}
export {};

import { StructuredTool } from "@langchain/core/tools";
import { CdpAgentkit, CdpAction, CdpActionSchemaAny } from "@coinbase/cdp-agentkit-core";
import { z } from "zod";
/**
 * This tool allows agents to interact with the cdp-sdk library and control an MPC Wallet onchain.
 *
 * To use this tool, you must first set as environment variables:
 *     CDP_API_KEY_NAME
 *     CDP_API_KEY_PRIVATE_KEY
 *     NETWORK_ID
 */
export declare class CdpTool<TActionSchema extends CdpActionSchemaAny> extends StructuredTool {
    /**
     * Schema definition for the tool's input
     */
    schema: TActionSchema;
    /**
     * The name of the tool
     */
    name: string;
    /**
     * The description of the tool
     */
    description: string;
    /**
     * The CDP Agentkit instance
     */
    private agentkit;
    /**
     * The CDP Action
     */
    private action;
    /**
     * Constructor for the CDP Tool class
     *
     * @param action - The CDP action to execute
     * @param agentkit - The CDP wrapper to use
     */
    constructor(action: CdpAction<TActionSchema>, agentkit: CdpAgentkit);
    /**
     * Executes the CDP action with the provided input
     *
     * @param input - An object containing either instructions or schema-validated arguments
     * @returns A promise that resolves to the result of the CDP action
     * @throws {Error} If the CDP action fails
     */
    protected _call(input: z.infer<typeof this.schema> & Record<string, unknown>): Promise<string>;
}

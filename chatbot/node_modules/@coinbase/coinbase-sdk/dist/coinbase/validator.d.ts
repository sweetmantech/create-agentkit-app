import { Validator as ValidatorModel } from "../client/api";
import { ValidatorStatus } from "./types";
/**
 * A representation of a validator onchain.
 */
export declare class Validator {
    private model;
    /**
     * Creates a Validator object.
     *
     * @class
     * @param model - The underlying Validator object.
     * @throws {Error} - If the Validator model is empty.
     */
    constructor(model: ValidatorModel);
    /**
     * Returns the list of Validators.
     *
     * @param networkId - The network ID.
     * @param assetId - The asset ID.
     * @param status - The status to filter by.
     * @returns The list of Validators.
     */
    static list(networkId: string, assetId: string, status?: ValidatorStatus): Promise<Validator[]>;
    /**
     *
     * Returns the details of a specific validator.
     *
     * @param networkId - The network ID.
     * @param assetId - The asset ID.
     * @param id - The unique publicly identifiable id of the validator for which to fetch the data.
     * @returns The requested validator details.
     */
    static fetch(networkId: string, assetId: string, id: string): Promise<Validator>;
    /**
     * Returns the Validator status.
     *
     * @param status - The API Validator status.
     * @returns The Validator status.
     */
    private static getAPIValidatorStatus;
    /**
     * Returns the Validator ID.
     *
     * @returns The Validator ID.
     */
    getValidatorId(): string;
    /**
     * Returns the Validator status.
     *
     * @returns The Validator status.
     */
    getStatus(): string;
    /**
     * Returns the string representation of the Validator.
     *
     * @returns The string representation of the Validator.
     */
    toString(): string;
}

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TwitterAgentkit = exports.TwitterAgentkitOptions = void 0;
const twitter_api_v2_1 = require("twitter-api-v2");
const zod_1 = require("zod");
/**
 * Schema for the options required to initialize the TwitterAgentkit.
 */
exports.TwitterAgentkitOptions = zod_1.z
    .object({
    apiKey: zod_1.z
        .string()
        .nonempty("The Twitter (X) API key is required")
        .describe("The Twitter (X) API key"),
    apiSecret: zod_1.z
        .string()
        .nonempty("The Twitter (X) API secret is required")
        .describe("The Twitter (X) API secret"),
    accessToken: zod_1.z
        .string()
        .nonempty("The Twitter (X) access token is required")
        .describe("The Twitter (X) access token"),
    accessTokenSecret: zod_1.z
        .string()
        .nonempty("The Twitter (X) access token secret is required")
        .describe("The Twitter (X) access token secret"),
})
    .strip()
    .describe("Options for initializing TwitterAgentkit");
/**
 * Schema for the environment variables required for TwitterAgentkit.
 */
const EnvSchema = zod_1.z.object({
    TWITTER_API_KEY: zod_1.z
        .string()
        .nonempty("TWITTER_API_KEY is required")
        .describe("The Twitter (X) API key"),
    TWITTER_API_SECRET: zod_1.z
        .string()
        .nonempty("TWITTER_API_SECRET is required")
        .describe("The Twitter (X) API secret"),
    TWITTER_ACCESS_TOKEN: zod_1.z
        .string()
        .nonempty("TWITTER_ACCESS_TOKEN is required")
        .describe("The Twitter (X) access token"),
    TWITTER_ACCESS_TOKEN_SECRET: zod_1.z
        .string()
        .nonempty("TWITTER_ACCESS_TOKEN_SECRET is required")
        .describe("The Twitter (X) access token secret"),
});
/**
 * Twitter Agentkit
 */
class TwitterAgentkit {
    /**
     * Initializes a new instance of TwitterAgentkit with the provided options.
     * If no options are provided, it attempts to load the required environment variables.
     *
     * @param options - Optional. The configuration options for the TwitterAgentkit.
     * @throws An error if the provided options are invalid or if the environment variables cannot be loaded.
     */
    constructor(options) {
        if (!options) {
            try {
                const env = EnvSchema.parse(process.env);
                options = {
                    apiKey: env.TWITTER_API_KEY,
                    apiSecret: env.TWITTER_API_SECRET,
                    accessToken: env.TWITTER_ACCESS_TOKEN,
                    accessTokenSecret: env.TWITTER_ACCESS_TOKEN_SECRET,
                };
            }
            catch (error) {
                if (error instanceof zod_1.z.ZodError) {
                    error.errors.forEach(err => console.log(`Error: ${err.path[0]} is required`));
                }
                throw new Error("Twitter (X) ENV could not be loaded.");
            }
        }
        if (!this.validateOptions(options)) {
            throw new Error("Twitter (X) Agentkit options could not be validated.");
        }
        this.client = new twitter_api_v2_1.TwitterApi({
            appKey: options.apiKey,
            appSecret: options.apiSecret,
            accessToken: options.accessToken,
            accessSecret: options.accessTokenSecret,
        });
    }
    /**
     * Validates the provided options for the TwitterAgentkit.
     *
     * @param options - The options to validate.
     * @returns True if the options are valid, otherwise false.
     */
    validateOptions(options) {
        try {
            exports.TwitterAgentkitOptions.parse(options);
        }
        catch (error) {
            if (error instanceof zod_1.z.ZodError) {
                error.errors.forEach(err => console.log("Error:", err.message));
            }
            return false;
        }
        return true;
    }
    /**
     * Executes a Twitter (X) action.
     *
     * @param action - The Twitter (X) action to execute.
     * @param args - The arguments for the action.
     * @returns The result of the execution.
     */
    async run(action, args) {
        return await action.func(this.client, args);
    }
}
exports.TwitterAgentkit = TwitterAgentkit;
